栈帧基址ebp
栈帧顶（栈指针）esp
用于保存当前栈帧的数据结构？
函数调用时压栈当前ebp，函数调用返回时弹出ebp，用于恢复上一个函数的栈帧
栈帧溢出攻击：使用栈帧溢出修改函数返回值，跳转到预先植入的二进制代码处执行，这段代码通常会打开shell，用于执行恶意命令，因此称为shellcode
借助栈指针esp作为跳板进行栈溢出攻击：由于程序的每次加载地址不同，因此很难通过修改函数返回地址找到shellcode位置，
把函数返回地址修改为一个保存了jmp esp指令的地址，函数返回时会把压栈的ebp弹出到esp中，此时jmp esp会跳转到压栈的ebp处，溢出攻击时在此处放上shellcode代码
这样无论程序加载到哪里，函数调用返回后都会运行栈内的代码，但是esp处存放代码空间有限，因此跳转到缓冲区处运行，而强制esp到缓冲器更低地址，防止push覆盖缓冲区
一般使用栈溢出攻击系统服务，因为系统服务权限较高，可以为所欲为
一般执行shell命令使用C语言的system系统调用，压栈cmd，使用call调用system，如果没有加载C库，需要先加载
如果执行cmd启动控制台，需要建立远程管道进行控制，另外缓冲区中的攻击代码不能出现0，否则会出现字符串异常

linux下查看栈空间ulimit -a
栈溢出报Segmentation fault

sprintf strcpy等不对入参进行检查的函数是不安全的，容易收到栈溢出攻击
snprintf memncpy等是安全的
